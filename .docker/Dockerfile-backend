# syntax = docker/dockerfile:1.0-experimental

FROM maven:3.6-jdk-8 as maven-dependency-cache

COPY ./pom.xml /base/pom.xml
COPY ./api/pom.xml /base/api/pom.xml
COPY ./api/src/main/webapp/WEB-INF /base/api/src/main/webapp/WEB-INF

WORKDIR /base

RUN --mount=type=cache,target=/root/.m2 mvn -pl api install -P local


FROM maven-dependency-cache as maven-build-process

ARG APP_ENV
ARG JWT_KEY_STRING

COPY ./api/src /base/api/src

RUN --mount=type=cache,target=/root/.m2 \
    mvn -pl api clean package -Dproject.build.sourceEncoding=UTF-8 -P ${APP_ENV:-prod}


FROM payara/server-full:5.194

ARG DB_DATABASE
ARG DB_USER
ARG DB_PASSWORD
ARG DB_PORT
ARG DB_HOST
ARG DB_DATASOURCE_NAME
ARG DB_DATASOURCE_CLASS
ARG TARGET_DIR=/opt/payara/appserver/glassfish/domains/production

USER payara
COPY --chown=payara:payara ./.docker/backend/logging.properties ${TARGET_DIR}/config/logging.properties
COPY ./.docker/backend/cacerts.jks ${TARGET_DIR}/config/cacerts.jks
COPY ./.docker/backend/keystore.jks ${TARGET_DIR}/config/keystore.jks
COPY ./.docker/backend/domain.tpl.xml ${TARGET_DIR}/config/domain.xml
COPY ./.docker/backend/env_replace /env_replace
COPY ./.docker/backend/postgresql-42.2.18.jar ${TARGET_DIR}/lib/postgresql-42.2.18.jar

RUN /env_replace ${TARGET_DIR}/config/domain.xml

COPY --from=maven-build-process base/api/target/invoice.war $DEPLOY_DIR
